import os
import shutil
from fastapi import APIRouter, HTTPException, status, Depends, UploadFile, File, Form
from datetime import datetime
from bson import ObjectId
from typing import Optional
import asyncio
from concurrent.futures import ThreadPoolExecutor

from auth.security import verify_current_user
from database import get_database
from models.cloned_voice import ClonedVoiceCreate, ClonedVoiceResponse

# Importer TTS uniquement si disponible (Python 3.11 requis)
TTS_AVAILABLE = False
try:
    from TTS.api import TTS
    TTS_AVAILABLE = True
    print("‚úÖ TTS disponible - Clonage vocal activ√©")
except ImportError:
    print("‚ö†Ô∏è  TTS non disponible - Mode √©chantillon uniquement")
    print("   Installer avec Python 3.11: pip install TTS")

router = APIRouter(prefix="/voice-cloning", tags=["voice-cloning"])

# Dossiers pour stocker les fichiers
UPLOAD_DIR = "uploaded_voices"
MODELS_DIR = "cloned_models"
os.makedirs(UPLOAD_DIR, exist_ok=True)
os.makedirs(MODELS_DIR, exist_ok=True)

# Pool de threads pour l'ex√©cution asynchrone du clonage
executor = ThreadPoolExecutor(max_workers=2)

# Instance TTS globale (charg√©e une seule fois)
_tts_instance = None

def get_tts_instance():
    """
    Obtenir l'instance TTS (singleton pattern)
    """
    global _tts_instance
    if not TTS_AVAILABLE:
        return None

    if _tts_instance is None:
        print("üîÑ Chargement du mod√®le XTTS-v2...")

        # D√©sactiver weights_only pour PyTorch 2.4+
        import torch
        original_load = torch.load
        def patched_load(*args, **kwargs):
            kwargs['weights_only'] = False
            return original_load(*args, **kwargs)
        torch.load = patched_load

        try:
            _tts_instance = TTS("tts_models/multilingual/multi-dataset/xtts_v2", gpu=False)
            print("‚úÖ Mod√®le XTTS-v2 charg√©")
        finally:
            torch.load = original_load

    return _tts_instance

def get_cloned_voices_collection():
    """Obtenir la collection des voix clon√©es"""
    db = get_database()
    return db.cloned_voices

async def process_voice_cloning(voice_id: str, audio_path: str, voice_name: str):
    """
    Traiter le clonage vocal en arri√®re-plan

    Pour XTTS-v2, le "clonage" consiste simplement √† v√©rifier que l'√©chantillon
    est valide. Le vrai clonage se fait √† la g√©n√©ration en utilisant speaker_wav.
    """
    try:
        cloned_voices_collection = get_cloned_voices_collection()

        print(f"üé§ D√©but du clonage vocal: {voice_name}")

        # V√©rifier que le fichier existe
        if not os.path.exists(audio_path):
            raise Exception(f"Fichier audio introuvable: {audio_path}")

        # XTTS-v2 utilise directement le WAV comme r√©f√©rence
        # Pas besoin de cr√©er un mod√®le s√©par√©
        # On marque simplement comme "ready"

        await cloned_voices_collection.update_one(
            {"_id": ObjectId(voice_id)},
            {
                "$set": {
                    "status": "ready",
                    "updated_at": datetime.utcnow()
                }
            }
        )

        print(f"‚úÖ Clonage termin√©: {voice_name}")

    except Exception as e:
        print(f"‚ùå Erreur clonage vocal {voice_name}: {e}")

        # Marquer comme √©chou√©
        cloned_voices_collection = get_cloned_voices_collection()
        await cloned_voices_collection.update_one(
            {"_id": ObjectId(voice_id)},
            {
                "$set": {
                    "status": "failed",
                    "updated_at": datetime.utcnow()
                }
            }
        )

@router.post("/upload", response_model=dict)
async def upload_voice_sample(
    name: str = Form(...),
    description: Optional[str] = Form(None),
    audio_file: UploadFile = File(...),
    current_user: dict = Depends(verify_current_user)
):
    """
    Uploader un √©chantillon vocal pour clonage (Premium uniquement)
    """
    try:
        # V√©rifier que l'utilisateur est Premium
        from database import get_users_collection
        users_collection = get_users_collection()
        user_doc = await users_collection.find_one({"_id": ObjectId(current_user["user_id"])})

        if not user_doc or not user_doc.get("is_premium", False):
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Le clonage vocal est r√©serv√© aux membres Premium"
            )

        # V√©rifier le format du fichier
        if not audio_file.content_type.startswith("audio/"):
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Le fichier doit √™tre un fichier audio"
            )

        # G√©n√©rer un nom de fichier unique
        file_extension = audio_file.filename.split(".")[-1]
        unique_filename = f"{current_user['user_id']}_{datetime.now().timestamp()}.{file_extension}"
        file_path = os.path.join(UPLOAD_DIR, unique_filename)

        # Sauvegarder le fichier
        with open(file_path, "wb") as buffer:
            shutil.copyfileobj(audio_file.file, buffer)

        # Cr√©er l'entr√©e dans la base de donn√©es
        cloned_voices_collection = get_cloned_voices_collection()

        # Cr√©er l'entr√©e dans la base de donn√©es
        voice_doc = {
            "user_id": current_user["user_id"],
            "name": name,
            "description": description,
            "audio_sample_url": f"/uploaded_voices/{unique_filename}",
            "voice_model_path": file_path,  # Chemin vers l'√©chantillon audio
            "status": "processing" if TTS_AVAILABLE else "ready",
            "created_at": datetime.utcnow(),
            "updated_at": datetime.utcnow()
        }

        result = await cloned_voices_collection.insert_one(voice_doc)
        voice_id = str(result.inserted_id)

        # Si TTS disponible, lancer le processus de clonage en arri√®re-plan
        if TTS_AVAILABLE:
            asyncio.create_task(
                process_voice_cloning(voice_id, file_path, name)
            )
            message = "Clonage vocal en cours... Cela peut prendre quelques minutes."
        else:
            message = "√âchantillon vocal upload√©. Clonage non disponible (TTS requis)."

        return {
            "success": True,
            "message": message,
            "voice": {
                "id": voice_id,
                "name": name,
                "description": description,
                "audio_sample_url": voice_doc["audio_sample_url"],
                "status": voice_doc["status"]
            }
        }

    except HTTPException:
        raise
    except Exception as e:
        print(f"Erreur lors de l'upload de l'√©chantillon vocal: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de l'upload de l'√©chantillon vocal"
        )

@router.get("/my-voices", response_model=dict)
async def get_my_cloned_voices(
    current_user: dict = Depends(verify_current_user)
):
    """
    R√©cup√©rer les voix clon√©es de l'utilisateur
    """
    try:
        cloned_voices_collection = get_cloned_voices_collection()

        cursor = cloned_voices_collection.find(
            {"user_id": current_user["user_id"]}
        ).sort("created_at", -1)

        voices = []
        async for voice_doc in cursor:
            voices.append({
                "id": str(voice_doc["_id"]),
                "name": voice_doc["name"],
                "description": voice_doc.get("description"),
                "audio_sample_url": voice_doc["audio_sample_url"],
                "status": voice_doc["status"],
                "created_at": voice_doc["created_at"].isoformat()
            })

        return {
            "success": True,
            "voices": voices
        }

    except Exception as e:
        print(f"Erreur lors de la r√©cup√©ration des voix clon√©es: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la r√©cup√©ration des voix clon√©es"
        )

@router.delete("/{voice_id}", response_model=dict)
async def delete_cloned_voice(
    voice_id: str,
    current_user: dict = Depends(verify_current_user)
):
    """
    Supprimer une voix clon√©e
    """
    try:
        cloned_voices_collection = get_cloned_voices_collection()

        # V√©rifier que la voix appartient √† l'utilisateur
        voice_doc = await cloned_voices_collection.find_one({
            "_id": ObjectId(voice_id),
            "user_id": current_user["user_id"]
        })

        if not voice_doc:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Voix clon√©e non trouv√©e"
            )

        # Supprimer le fichier audio
        if voice_doc.get("audio_sample_url"):
            file_path = voice_doc["audio_sample_url"].replace("/", os.sep).lstrip(os.sep)
            if os.path.exists(file_path):
                os.remove(file_path)

        # Supprimer de la base de donn√©es
        await cloned_voices_collection.delete_one({"_id": ObjectId(voice_id)})

        return {
            "success": True,
            "message": "Voix clon√©e supprim√©e avec succ√®s"
        }

    except HTTPException:
        raise
    except Exception as e:
        print(f"Erreur lors de la suppression de la voix clon√©e: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la suppression"
        )

@router.post("/generate/{voice_id}", response_model=dict)
async def generate_with_cloned_voice(
    voice_id: str,
    text: str = Form(...),
    language: str = Form("en"),
    current_user: dict = Depends(verify_current_user)
):
    """
    G√©n√©rer de l'audio avec une voix clon√©e (Premium uniquement)

    Utilise XTTS-v2 pour cloner la voix √† partir de l'√©chantillon audio.
    """
    try:
        # V√©rifier que TTS est disponible
        if not TTS_AVAILABLE:
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="Service de clonage non disponible. TTS requis (Python 3.11)."
            )

        # V√©rifier que l'utilisateur est Premium
        from database import get_users_collection
        users_collection = get_users_collection()
        user_doc = await users_collection.find_one({"_id": ObjectId(current_user["user_id"])})

        if not user_doc or not user_doc.get("is_premium", False):
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="La g√©n√©ration avec voix clon√©e est r√©serv√©e aux membres Premium"
            )

        # R√©cup√©rer la voix clon√©e
        cloned_voices_collection = get_cloned_voices_collection()
        voice_doc = await cloned_voices_collection.find_one({
            "_id": ObjectId(voice_id),
            "user_id": current_user["user_id"]
        })

        if not voice_doc:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Voix clon√©e non trouv√©e"
            )

        if voice_doc["status"] != "ready":
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"Voix non pr√™te (statut: {voice_doc['status']})"
            )

        # G√©n√©rer un nom de fichier unique pour la sortie
        output_filename = f"cloned_{current_user['user_id']}_{datetime.now().timestamp()}.wav"
        output_path = os.path.join(MODELS_DIR, output_filename)

        # G√©n√©rer l'audio avec la voix clon√©e
        print(f"üé§ G√©n√©ration avec voix clon√©e: {voice_doc['name']}")
        print(f"üìù Texte: {text[:50]}...")

        def generate_audio():
            """Fonction synchrone pour la g√©n√©ration"""
            tts = get_tts_instance()
            speaker_wav = voice_doc["voice_model_path"]

            tts.tts_to_file(
                text=text,
                file_path=output_path,
                speaker_wav=speaker_wav,
                language=language
            )

        # Ex√©cuter la g√©n√©ration dans un thread s√©par√©
        loop = asyncio.get_event_loop()
        await loop.run_in_executor(executor, generate_audio)

        print(f"‚úÖ Audio g√©n√©r√©: {output_path}")

        # Retourner l'URL du fichier audio
        audio_url = f"/cloned_models/{output_filename}"

        return {
            "success": True,
            "message": "Audio g√©n√©r√© avec succ√®s",
            "audio_url": audio_url,
            "voice_name": voice_doc["name"]
        }

    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration voix clon√©e: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erreur lors de la g√©n√©ration: {str(e)}"
        )

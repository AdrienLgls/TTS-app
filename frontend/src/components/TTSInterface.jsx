/**
 * Interface principale de synth√®se vocale TTS
 * 
 * Composant React principal qui orchestre toute l'exp√©rience utilisateur :
 * - Saisie et validation du texte
 * - Configuration des param√®tres de synth√®se (voix, vitesse)
 * - Communication avec l'API Kokoro optimis√©e
 * - Gestion des √©tats de chargement et d'erreurs
 * - Int√©gration du lecteur audio
 * 
 * Optimis√© pour l'API Kokoro v0.19 avec gestion avanc√©e des performances.
 */

import { useState, useRef, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import axios from 'axios';
import VoiceSelector from './VoiceSelector';
import AudioPlayer from './AudioPlayer';
import UserHistory from './UserHistory';
import './TTSInterface.css';

const TTSInterface = () => {
  // ===============================
  // AUTHENTIFICATION
  // ===============================

  const { user, logout } = useAuth();

  // ===============================
  // √âTATS DE L'APPLICATION
  // ===============================
  
  // √âtat du texte √† synth√©tiser (valid√© 1-2000 caract√®res)
  const [text, setText] = useState('');
  
  // Voix s√©lectionn√©e (par d√©faut : af_heart bas√© sur les tests)
  const [selectedVoice, setSelectedVoice] = useState('af_heart');
  
  // Vitesse de lecture (plage valid√©e : 0.5x √† 2.0x)
  const [speed, setSpeed] = useState(1.0);
  
  // √âtat de chargement pendant la g√©n√©ration
  const [isLoading, setIsLoading] = useState(false);
  
  // URL de l'audio g√©n√©r√© pour lecture et t√©l√©chargement
  const [audioUrl, setAudioUrl] = useState(null);
  
  // M√©tadonn√©es de la derni√®re g√©n√©ration r√©ussie
  const [lastGeneration, setLastGeneration] = useState(null);
  
  // Gestion des erreurs utilisateur
  const [error, setError] = useState(null);

  // Limites de l'utilisateur
  const [limits, setLimits] = useState({
    char_limit: 300,
    daily_limit: 1,
    daily_used: 0,
    daily_remaining: 1,
    is_premium: false
  });

  // ===============================
  // R√âF√âRENCES ET CONFIGURATION
  // ===============================
  
  // R√©f√©rence pour la zone de texte (focus automatique)
  const textareaRef = useRef(null);

  // URL de l'API backend authentifi√©e
  const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3000/api';

  // URL de l'API TTS Kokoro
  const TTS_API_URL = import.meta.env.VITE_TTS_API_URL || 'http://localhost:8000';

  // ===============================
  // EFFETS
  // ===============================

  // Charger les limites de l'utilisateur au chargement
  useEffect(() => {
    fetchUserLimits();
  }, [user]);

  const fetchUserLimits = async () => {
    try {
      // Pour les utilisateurs non connect√©s, g√©rer les limites localement
      if (!user) {
        const today = new Date().toDateString();
        const stored = localStorage.getItem('guest_usage');
        let guestUsage = stored ? JSON.parse(stored) : { date: today, count: 0 };

        // R√©initialiser si c'est un nouveau jour
        if (guestUsage.date !== today) {
          guestUsage = { date: today, count: 0 };
          localStorage.setItem('guest_usage', JSON.stringify(guestUsage));
        }

        setLimits({
          char_limit: 300,
          daily_limit: 1,
          daily_used: guestUsage.count,
          daily_remaining: Math.max(0, 1 - guestUsage.count),
          is_premium: false
        });
        return;
      }

      // Pour les utilisateurs connect√©s
      const response = await axios.get(`${API_BASE_URL}/generations/limits`, {
        withCredentials: true
      });
      if (response.data.success) {
        setLimits(response.data.limits);
      }
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des limites:', error);
    }
  };

  // ===============================
  // FONCTIONS M√âTIERS
  // ===============================
  
  /**
   * Fonction principale de g√©n√©ration audio
   * 
   * Orchestre tout le processus de synth√®se vocale :
   * 1. Validation des entr√©es utilisateur
   * 2. Appel API avec gestion d'erreurs robuste
   * 3. Traitement de la r√©ponse et m√©tadonn√©es
   * 4. Mise √† jour de l'√©tat de l'application
   */
  const handleGenerate = async () => {
    if (!text.trim()) {
      setError('Veuillez saisir du texte √† synth√©tiser');
      return;
    }

    // V√©rifier les limites avant de g√©n√©rer
    if (text.length > limits.char_limit) {
      if (limits.is_premium) {
        setError(`Le texte ne peut pas d√©passer ${limits.char_limit.toLocaleString()} caract√®res`);
      } else if (user) {
        setError(`Le texte ne peut pas d√©passer ${limits.char_limit} caract√®res (connect√©). Passez Premium pour 100 000 caract√®res !`);
      } else {
        setError(`Le texte ne peut pas d√©passer ${limits.char_limit} caract√®res (non connect√©). Connectez-vous pour 2 000 caract√®res !`);
      }
      return;
    }

    // V√©rifier la limite quotidienne (sauf pour Premium)
    if (limits.daily_limit !== null && limits.daily_remaining <= 0) {
      if (user) {
        setError(`Limite quotidienne atteinte (${limits.daily_limit} g√©n√©rations/jour). Passez Premium pour un acc√®s illimit√© !`);
      } else {
        setError(`Vous avez atteint votre limite quotidienne. Connectez-vous pour plus de g√©n√©rations !`);
      }
      return;
    }

    setIsLoading(true);
    setError(null);
    setAudioUrl(null);

    try {
      // D√©tecter si c'est une voix clon√©e (commence par "cloned-")
      const isClonedVoice = selectedVoice.startsWith('cloned-');

      if (isClonedVoice) {
        // G√©n√©ration avec voix clon√©e via le backend principal
        console.log('üé§ G√©n√©ration avec voix clon√©e:', { text: text.substring(0, 50) + '...', voice: selectedVoice });

        const voiceId = selectedVoice.replace('cloned-', '');
        const formData = new FormData();
        formData.append('text', text);
        formData.append('language', 'en'); // TODO: D√©tecter la langue automatiquement

        const response = await axios.post(
          `${API_BASE_URL}/voice-cloning/generate/${voiceId}`,
          formData,
          {
            headers: { 'Content-Type': 'multipart/form-data' },
            withCredentials: true
          }
        );

        if (response.data.success) {
          // Pour les voix clon√©es, l'URL est d√©j√† compl√®te (commence par /)
          // On utilise juste le domaine sans /api
          const baseUrl = import.meta.env.VITE_API_URL?.replace('/api', '') || 'http://localhost:3000';
          const audioFullUrl = `${baseUrl}${response.data.audio_url}`;
          setAudioUrl(audioFullUrl);

          setLastGeneration({
            text: text,
            voice: response.data.voice_name,
            speed: 1.0,
            audio_url: audioFullUrl
          });

          console.log('‚úÖ Audio g√©n√©r√© avec voix clon√©e:', audioFullUrl);
        }
      } else {
        // G√©n√©ration normale avec Kokoro
        console.log('üé§ G√©n√©ration audio avec Kokoro:', { text: text.substring(0, 50) + '...', voice: selectedVoice, speed });

        const response = await axios.post(`${TTS_API_URL}/tts`, {
          text: text,
          voice: selectedVoice,
          speed: speed,
          format: 'wav'
        });

        if (response.data.success) {
          const audioFullUrl = `${TTS_API_URL}${response.data.audio_url}`;
          setAudioUrl(audioFullUrl);

          // Sauvegarder les infos de la g√©n√©ration
          setLastGeneration({
            text: text,
            voice: selectedVoice,
            speed: speed,
            duration: response.data.audio_duration,
            generationTime: response.data.generation_time,
            segments: response.data.segments_count,
            timestamp: new Date().toLocaleTimeString()
          });

          console.log('‚úÖ Audio g√©n√©r√©:', response.data);

          // Sauvegarder dans l'historique si l'utilisateur est connect√©
          if (user) {
            try {
              await axios.post(`${API_BASE_URL}/generations`, {
                text: text,
                voice: selectedVoice,
                speed: speed,
                audio_url: response.data.audio_url,
                audio_duration: response.data.audio_duration,
                generation_time: response.data.generation_time
              }, {
                withCredentials: true
              });
              console.log('‚úÖ G√©n√©ration sauvegard√©e dans l\'historique');

              // D√©clencher un √©v√©nement pour rafra√Æchir l'historique
              window.dispatchEvent(new Event('historyUpdated'));

              // Rafra√Æchir les limites apr√®s g√©n√©ration
              await fetchUserLimits();
            } catch (saveError) {
              console.error('‚ö†Ô∏è Erreur lors de la sauvegarde dans l\'historique:', saveError);
              // On ne bloque pas l'utilisateur si la sauvegarde √©choue
            }
          } else {
            // Pour les utilisateurs non connect√©s, incr√©menter le compteur local
            const today = new Date().toDateString();
            const stored = localStorage.getItem('guest_usage');
            let guestUsage = stored ? JSON.parse(stored) : { date: today, count: 0 };

          if (guestUsage.date !== today) {
            guestUsage = { date: today, count: 1 };
          } else {
            guestUsage.count += 1;
          }

          localStorage.setItem('guest_usage', JSON.stringify(guestUsage));

          // Rafra√Æchir les limites
          await fetchUserLimits();
        }
        } else {
          throw new Error(response.data.message || 'Erreur lors de la g√©n√©ration');
        }
      }

    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration:', error);

      if (error.response) {
        // Erreur de l'API
        const detail = error.response.data?.detail || error.response.data?.message || error.response.status;
        setError(`Erreur API: ${detail}`);
      } else if (error.request) {
        // Erreur r√©seau
        const apiName = selectedVoice.startsWith('cloned-') ? 'Backend (port 3000)' : 'Kokoro (port 8000)';
        setError(`Impossible de contacter ${apiName}. V√©rifiez qu'il est d√©marr√©.`);
      } else {
        // Autre erreur
        setError(`Erreur: ${error.message}`);
      }
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * T√©l√©chargement programmatique de l'audio g√©n√©r√©
   * 
   * Cr√©e dynamiquement un lien de t√©l√©chargement et l'active.
   * G√®re le nommage automatique avec timestamp pour unicit√©.
   */
  const handleDownload = () => {
    if (audioUrl) {
      const link = document.createElement('a');
      link.href = audioUrl;
      link.download = `kokoro-tts-${Date.now()}.wav`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  /**
   * Insertion d'un texte d'exemple dans la zone de saisie
   * 
   * Facilite l'utilisation en fournissant des textes pr√©-d√©finis
   * optimis√©s pour d√©montrer les capacit√©s de Kokoro.
   * 
   * @param {string} exampleText - Texte √† ins√©rer
   */
  const handleExampleText = (exampleText) => {
    setText(exampleText);
    textareaRef.current?.focus();
  };

  // ===============================
  // DONN√âES DE CONFIGURATION
  // ===============================
  
  // Textes d'exemple optimis√©s pour Kokoro (test√©s et valid√©s)
  // Vari√©t√© de longueurs et complexit√©s pour d√©montrer les capacit√©s
  const examples = [
    "Hello, this is a test of the Kokoro TTS system.",
    "Kokoro is an open-weight TTS model with 82 million parameters. Despite its lightweight architecture, it delivers comparable quality to larger models.",
    "The quick brown fox jumps over the lazy dog. This sentence contains every letter of the alphabet.",
    "Welcome to our text-to-speech application. You can choose from different voices and adjust the speed."
  ];

  return (
    <div className="tts-interface">

      {/* Header */}
      <header className="app-header">
        <nav className="nav">
          <Link to="/" className="logo">VoiceAI</Link>
          <div className="nav-links">
            <Link to="/" className="nav-link">Accueil</Link>
            {user?.is_premium && (
              <Link to="/voice-cloning" className="nav-link">üé§ Clonage Vocal</Link>
            )}
            <div className="user-info">
              {user ? (
                <>
                  <span className="user-greeting">Bonjour, {user.name}</span>
                  {!limits.is_premium && (
                    <Link to="/premium" className="premium-link">
                      ‚ú® Premium
                    </Link>
                  )}
                  {limits.is_premium && (
                    <span className="premium-badge-header">‚ú® Premium</span>
                  )}
                  <button onClick={logout} className="logout-btn">D√©connexion</button>
                </>
              ) : (
                <span className="user-greeting">Interface TTS</span>
              )}
            </div>
          </div>
        </nav>
      </header>

      <div className="tts-container">
        
        {/* Main Content */}
        <div className="main-content">
          <div className="content-header">
            <h1 className="page-title">Synth√®se Vocale</h1>
            <p className="page-subtitle">Transformez votre texte en voix naturelle avec l'IA Kokoro</p>
          </div>

          {/* Section de saisie de texte */}
          <div className="text-input-section glass-card">
            <div className="section-header">
              <h3 className="section-title">Votre texte</h3>
              <div className="limits-display">
                <span className="char-counter">{text.length}/{limits.char_limit.toLocaleString()} caract√®res</span>
                {limits.daily_limit !== null && (
                  <span className="daily-counter">
                    {limits.daily_remaining}/{limits.daily_limit} audio restants aujourd'hui
                  </span>
                )}
                {limits.is_premium && (
                  <span className="premium-badge-small">‚ú® Premium</span>
                )}
              </div>
            </div>

            <textarea
              ref={textareaRef}
              id="text-input"
              className="text-input modern-input"
              placeholder={
                limits.is_premium
                  ? "Saisissez le texte √† convertir en audio (jusqu'√† 100 000 caract√®res)..."
                  : user
                  ? "Saisissez le texte √† convertir en audio (max 2 000 caract√®res)..."
                  : "Saisissez un texte court (max 300 caract√®res) - Connectez-vous pour plus !"
              }
              value={text}
              onChange={(e) => setText(e.target.value)}
              rows={6}
              maxLength={limits.char_limit}
            />

            {/* Exemples de texte */}
            <div className="examples-section">
              <h4 className="examples-title">Textes d'exemple</h4>
              <div className="examples-grid">
                {examples.map((example, index) => (
                  <button
                    key={index}
                    className="example-card"
                    onClick={() => handleExampleText(example)}
                    title={example}
                  >
                    <div className="example-icon">üìù</div>
                    <span className="example-label">Exemple {index + 1}</span>
                    <span className="example-preview">{example.substring(0, 40)}...</span>
                  </button>
                ))}
              </div>
            </div>
          </div>

          {/* Section de configuration */}
          <div className="config-section">
            <div className="config-grid">
              {/* S√©lecteur de voix */}
              <div className="config-card glass-card">
                <VoiceSelector
                  selectedVoice={selectedVoice}
                  onVoiceChange={setSelectedVoice}
                />
              </div>

              {/* Contr√¥le de vitesse */}
              <div className="config-card glass-card">
                <div className="speed-control">
                  <div className="control-header">
                    <h4 className="control-title">Vitesse de lecture</h4>
                    <span className="speed-value">{speed}x</span>
                  </div>
                  <input
                    type="range"
                    id="speed-slider"
                    className="speed-slider modern-slider"
                    min="0.5"
                    max="2.0"
                    step="0.1"
                    value={speed}
                    onChange={(e) => setSpeed(parseFloat(e.target.value))}
                  />
                  <div className="speed-marks">
                    <span>Lent</span>
                    <span>Normal</span>
                    <span>Rapide</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Bouton de g√©n√©ration */}
          <div className="generate-section">
            <button
              className={`generate-button btn-gradient ${isLoading ? 'loading' : ''} ${!text.trim() ? 'disabled' : ''}`}
              onClick={handleGenerate}
              disabled={isLoading || !text.trim()}
            >
              {isLoading ? (
                <>
                  <span className="loading-spinner">‚ü≥</span>
                  <span>G√©n√©ration en cours...</span>
                </>
              ) : (
                <>
                  <span className="generate-icon">üé§</span>
                  <span>G√©n√©rer l'audio</span>
                </>
              )}
            </button>
          </div>

          {/* Affichage des erreurs */}
          {error && (
            <div className="error-message modern-alert error">
              <div className="alert-icon">‚ö†Ô∏è</div>
              <div className="alert-content">
                <h4>Erreur</h4>
                <p>{error}</p>
              </div>
            </div>
          )}

          {/* Lecteur audio et t√©l√©chargement */}
          {audioUrl && (
            <div className="audio-section glass-card">
              <AudioPlayer
                audioUrl={audioUrl}
                onDownload={handleDownload}
                generationInfo={lastGeneration}
              />
            </div>
          )}


          {/* Message d'incitation pour les non-connect√©s */}
          {!user && audioUrl && (
            <div className="upgrade-banner glass-card">
              <div className="banner-content">
                <div className="banner-icon">üéâ</div>
                <div className="banner-text">
                  <h3>Vous aimez VoiceAI ?</h3>
                  <p>Cr√©ez un compte gratuit pour d√©bloquer toutes les fonctionnalit√©s :</p>
                  <ul className="feature-list">
                    <li>‚úÖ G√©n√©rez jusqu'√† <strong>2000 caract√®res</strong> au lieu de 300</li>
                    <li>‚úÖ T√©l√©chargez vos <strong>fichiers audio</strong></li>
                    <li>‚úÖ Consultez votre <strong>historique complet</strong></li>
                    <li>‚úÖ Sauvegardez vos <strong>pr√©f√©rences</strong></li>
                  </ul>
                </div>
              </div>
              <div className="banner-actions">
                <Link to="/register" className="btn-gradient">
                  Cr√©er un compte gratuit
                </Link>
                <Link to="/login" className="btn-secondary">
                  Se connecter
                </Link>
              </div>
            </div>
          )}

          {/* Carte Premium pour utilisateurs gratuits */}
          {user && !limits.is_premium && (
            <div className="premium-upgrade-card glass-card">
              <div className="premium-card-content">
                <div className="premium-icon">‚ú®</div>
                <div className="premium-text">
                  <h3>Passez Premium</h3>
                  <p>D√©bloquez toutes les fonctionnalit√©s avanc√©es :</p>
                  <ul className="premium-features-list">
                    <li>‚úÖ <strong>100 000 caract√®res</strong> par g√©n√©ration (au lieu de 2 000)</li>
                    <li>‚úÖ <strong>G√©n√©rations illimit√©es</strong> par jour (au lieu de 10)</li>
                    <li>‚úÖ <strong>T√©l√©chargement</strong> de tous vos fichiers</li>
                    <li>‚úÖ <strong>Historique complet</strong> sans limite</li>
                    <li>‚úÖ <strong>Support prioritaire</strong></li>
                  </ul>
                  <div className="premium-price">
                    <span className="price-amount">9,99 ‚Ç¨</span>
                    <span className="price-period">paiement unique</span>
                  </div>
                </div>
              </div>
              <div className="premium-card-action">
                <Link to="/premium" className="btn-premium">
                  <span>‚ú®</span>
                  <span>Passer Premium</span>
                </Link>
              </div>
            </div>
          )}

          {/* Historique utilisateur */}
          {user && <UserHistory />}
        </div>
      </div>
    </div>
  );
};

export default TTSInterface;
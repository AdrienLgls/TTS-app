/**
 * Interface principale de synth√®se vocale TTS
 * 
 * Composant React principal qui orchestre toute l'exp√©rience utilisateur :
 * - Saisie et validation du texte
 * - Configuration des param√®tres de synth√®se (voix, vitesse)
 * - Communication avec l'API Kokoro optimis√©e
 * - Gestion des √©tats de chargement et d'erreurs
 * - Int√©gration du lecteur audio
 * 
 * Optimis√© pour l'API Kokoro v0.19 avec gestion avanc√©e des performances.
 */

import { useState, useRef } from 'react';
import axios from 'axios';
import VoiceSelector from './VoiceSelector';
import AudioPlayer from './AudioPlayer';
import './TTSInterface.css';

const TTSInterface = () => {
  // ===============================
  // √âTATS DE L'APPLICATION
  // ===============================
  
  // √âtat du texte √† synth√©tiser (valid√© 1-2000 caract√®res)
  const [text, setText] = useState('');
  
  // Voix s√©lectionn√©e (par d√©faut : af_heart bas√© sur les tests)
  const [selectedVoice, setSelectedVoice] = useState('af_heart');
  
  // Vitesse de lecture (plage valid√©e : 0.5x √† 2.0x)
  const [speed, setSpeed] = useState(1.0);
  
  // √âtat de chargement pendant la g√©n√©ration
  const [isLoading, setIsLoading] = useState(false);
  
  // URL de l'audio g√©n√©r√© pour lecture et t√©l√©chargement
  const [audioUrl, setAudioUrl] = useState(null);
  
  // M√©tadonn√©es de la derni√®re g√©n√©ration r√©ussie
  const [lastGeneration, setLastGeneration] = useState(null);
  
  // Gestion des erreurs utilisateur
  const [error, setError] = useState(null);

  // ===============================
  // R√âF√âRENCES ET CONFIGURATION
  // ===============================
  
  // R√©f√©rence pour la zone de texte (focus automatique)
  const textareaRef = useRef(null);

  // URL de l'API Kokoro optimis√©e (environnement de d√©veloppement)
  // Production : remplacer par l'URL du serveur d√©ploy√©
  const API_BASE_URL = 'http://localhost:8000';

  // ===============================
  // FONCTIONS M√âTIERS
  // ===============================
  
  /**
   * Fonction principale de g√©n√©ration audio
   * 
   * Orchestre tout le processus de synth√®se vocale :
   * 1. Validation des entr√©es utilisateur
   * 2. Appel API avec gestion d'erreurs robuste
   * 3. Traitement de la r√©ponse et m√©tadonn√©es
   * 4. Mise √† jour de l'√©tat de l'application
   */
  const handleGenerate = async () => {
    if (!text.trim()) {
      setError('Veuillez saisir du texte √† synth√©tiser');
      return;
    }

    if (text.length > 2000) {
      setError('Le texte ne peut pas d√©passer 2000 caract√®res');
      return;
    }

    setIsLoading(true);
    setError(null);
    setAudioUrl(null);

    try {
      console.log('üé§ G√©n√©ration audio avec:', { text: text.substring(0, 50) + '...', voice: selectedVoice, speed });

      const response = await axios.post(`${API_BASE_URL}/tts`, {
        text: text,
        voice: selectedVoice,
        speed: speed,
        format: 'wav'
      });

      if (response.data.success) {
        const audioFullUrl = `${API_BASE_URL}${response.data.audio_url}`;
        setAudioUrl(audioFullUrl);
        
        // Sauvegarder les infos de la g√©n√©ration
        setLastGeneration({
          text: text,
          voice: selectedVoice,
          speed: speed,
          duration: response.data.audio_duration,
          generationTime: response.data.generation_time,
          segments: response.data.segments_count,
          timestamp: new Date().toLocaleTimeString()
        });

        console.log('‚úÖ Audio g√©n√©r√©:', response.data);
      } else {
        throw new Error(response.data.message || 'Erreur lors de la g√©n√©ration');
      }

    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration:', error);
      
      if (error.response) {
        // Erreur de l'API
        setError(`Erreur API: ${error.response.data.detail || error.response.status}`);
      } else if (error.request) {
        // Erreur r√©seau
        setError('Impossible de contacter l\'API. V√©rifiez qu\'elle est d√©marr√©e sur localhost:8000');
      } else {
        // Autre erreur
        setError(`Erreur: ${error.message}`);
      }
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * T√©l√©chargement programmatique de l'audio g√©n√©r√©
   * 
   * Cr√©e dynamiquement un lien de t√©l√©chargement et l'active.
   * G√®re le nommage automatique avec timestamp pour unicit√©.
   */
  const handleDownload = () => {
    if (audioUrl) {
      const link = document.createElement('a');
      link.href = audioUrl;
      link.download = `kokoro-tts-${Date.now()}.wav`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  /**
   * Insertion d'un texte d'exemple dans la zone de saisie
   * 
   * Facilite l'utilisation en fournissant des textes pr√©-d√©finis
   * optimis√©s pour d√©montrer les capacit√©s de Kokoro.
   * 
   * @param {string} exampleText - Texte √† ins√©rer
   */
  const handleExampleText = (exampleText) => {
    setText(exampleText);
    textareaRef.current?.focus();
  };

  // ===============================
  // DONN√âES DE CONFIGURATION
  // ===============================
  
  // Textes d'exemple optimis√©s pour Kokoro (test√©s et valid√©s)
  // Vari√©t√© de longueurs et complexit√©s pour d√©montrer les capacit√©s
  const examples = [
    "Hello, this is a test of the Kokoro TTS system.",
    "Kokoro is an open-weight TTS model with 82 million parameters. Despite its lightweight architecture, it delivers comparable quality to larger models.",
    "The quick brown fox jumps over the lazy dog. This sentence contains every letter of the alphabet.",
    "Welcome to our text-to-speech application. You can choose from different voices and adjust the speed."
  ];

  return (
    <div className="tts-interface">
      <div className="tts-container">
        
        {/* Section de saisie de texte */}
        <div className="text-input-section">
          <label htmlFor="text-input" className="input-label">
            Texte √† synth√©tiser ({text.length}/2000)
          </label>
          
          <textarea
            ref={textareaRef}
            id="text-input"
            className="text-input"
            placeholder="Saisissez le texte √† convertir en audio..."
            value={text}
            onChange={(e) => setText(e.target.value)}
            rows={6}
            maxLength={2000}
          />

          {/* Exemples de texte */}
          <div className="examples-section">
            <span className="examples-label">Exemples :</span>
            <div className="examples-buttons">
              {examples.map((example, index) => (
                <button
                  key={index}
                  className="example-button"
                  onClick={() => handleExampleText(example)}
                  title={example}
                >
                  Exemple {index + 1}
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* Section de configuration */}
        <div className="config-section">
          <div className="config-row">
            {/* S√©lecteur de voix */}
            <VoiceSelector
              selectedVoice={selectedVoice}
              onVoiceChange={setSelectedVoice}
            />

            {/* Contr√¥le de vitesse */}
            <div className="speed-control">
              <label htmlFor="speed-slider" className="control-label">
                Vitesse: {speed}x
              </label>
              <input
                type="range"
                id="speed-slider"
                className="speed-slider"
                min="0.5"
                max="2.0"
                step="0.1"
                value={speed}
                onChange={(e) => setSpeed(parseFloat(e.target.value))}
              />
              <div className="speed-marks">
                <span>Lent</span>
                <span>Normal</span>
                <span>Rapide</span>
              </div>
            </div>
          </div>
        </div>

        {/* Bouton de g√©n√©ration */}
        <div className="generate-section">
          <button
            className={`generate-button ${isLoading ? 'loading' : ''}`}
            onClick={handleGenerate}
            disabled={isLoading || !text.trim()}
          >
            {isLoading ? (
              <>
                <span className="loading-spinner">‚ü≥</span>
                G√©n√©ration en cours...
              </>
            ) : (
              'G√©n√©rer l\'audio'
            )}
          </button>
        </div>

        {/* Affichage des erreurs */}
        {error && (
          <div className="error-message">
            {error}
          </div>
        )}

        {/* Lecteur audio et t√©l√©chargement */}
        {audioUrl && (
          <div className="audio-section">
            <AudioPlayer
              audioUrl={audioUrl}
              onDownload={handleDownload}
              generationInfo={lastGeneration}
            />
          </div>
        )}

        {/* Informations de la derni√®re g√©n√©ration */}
        {lastGeneration && (
          <div className="generation-info">
            <h4>Derni√®re g√©n√©ration</h4>
            <div className="info-grid">
              <div className="info-item">
                <span className="info-label">Voix:</span>
                <span className="info-value">{lastGeneration.voice}</span>
              </div>
              <div className="info-item">
                <span className="info-label">Dur√©e:</span>
                <span className="info-value">{lastGeneration.duration?.toFixed(2)}s</span>
              </div>
              <div className="info-item">
                <span className="info-label">G√©n√©ration:</span>
                <span className="info-value">{lastGeneration.generationTime?.toFixed(2)}s</span>
              </div>
              <div className="info-item">
                <span className="info-label">Segments:</span>
                <span className="info-value">{lastGeneration.segments}</span>
              </div>
              <div className="info-item">
                <span className="info-label">Heure:</span>
                <span className="info-value">{lastGeneration.timestamp}</span>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default TTSInterface;
#!/usr/bin/env python3
"""
Kokoro TTS API - Version Optimis√©e

API de synth√®se vocale haute performance utilisant le mod√®le Kokoro v0.19.
Optimis√©e pour l'anglais am√©ricain avec gestion avanc√©e des performances et de la qualit√©.

Fonctionnalit√©s principales :
- Chargement unique du mod√®le au d√©marrage (optimisation m√©moire)
- 3 voix optimis√©es : Heart (recommand√©e), Bella, Sarah
- M√©triques d√©taill√©es et monitoring
- Validation stricte des entr√©es
- Nettoyage automatique des fichiers temporaires
- CORS configur√© pour d√©veloppement/production

Auteur : Bas√© sur les tests utilisateur r√©ussis
Version : 1.1.0
Performance : ~1.3s g√©n√©ration moyenne (ratio 3.5x temps r√©el)
"""

from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.responses import FileResponse, StreamingResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
from typing import Optional, List
import uvicorn
import os
import uuid
import time
import asyncio
from pathlib import Path
import logging
import soundfile as sf
import io
from contextlib import asynccontextmanager

# ===============================
# CONFIGURATION LOGGING
# ===============================

# Configuration du syst√®me de logs avec format professionnel
# Inclut timestamp, nom du module, niveau et message
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),  # Console output
        # logging.FileHandler('kokoro_api.log')  # Fichier log (optionnel en production)
    ]
)
logger = logging.getLogger(__name__)

# ===============================
# VARIABLES GLOBALES MOD√àLE
# ===============================

# Instance unique du pipeline Kokoro (pattern Singleton pour optimisation m√©moire)
# Charg√© une seule fois au d√©marrage de l'application
kokoro_pipeline = None

# Temps de chargement du mod√®le (m√©trique de performance)
# Utilis√© pour le monitoring et les statistiques
model_load_time = None

# ===============================
# MOD√àLES PYDANTIC (VALIDATION)
# ===============================

class TTSRequest(BaseModel):
    """
    Mod√®le de requ√™te pour la synth√®se vocale
    
    Validation automatique des param√®tres d'entr√©e :
    - Texte : 1-2000 caract√®res (limit√© pour √©viter les timeouts)
    - Voix : Parmi les 3 voix valid√©es lors des tests
    - Vitesse : 0.5x √† 2.0x (plage optimale test√©e)
    - Format : WAV uniquement (qualit√© maximale)
    """
    text: str = Field(..., min_length=1, max_length=2000, description="Texte √† synth√©tiser (max 2000 caract√®res)")
    voice: Optional[str] = Field("af_heart", description="Voix √† utiliser: af_heart, af_bella, af_sarah")
    speed: Optional[float] = Field(1.0, ge=0.5, le=2.0, description="Vitesse de lecture (0.5 √† 2.0)")
    format: Optional[str] = Field("wav", description="Format audio (wav uniquement pour l'instant)")

class TTSResponse(BaseModel):
    """
    Mod√®le de r√©ponse de synth√®se vocale
    
    Contient toutes les m√©tadonn√©es n√©cessaires au frontend :
    - URL de t√©l√©chargement s√©curis√©e
    - M√©triques de performance
    - Informations de d√©bogage
    """
    success: bool
    message: str
    audio_url: Optional[str] = None
    audio_duration: Optional[float] = None
    generation_time: Optional[float] = None
    text_length: int
    voice_used: str
    segments_count: int

class VoiceInfo(BaseModel):
    """
    Informations d√©taill√©es sur une voix
    
    M√©tadonn√©es enrichies bas√©es sur les tests utilisateur :
    - Description subjective de la qualit√©
    - Recommandation bas√©e sur les r√©sultats de test
    - Informations techniques (langue, genre)
    """
    id: str
    name: str
    description: str
    language: str
    gender: str
    recommended: bool = False

class HealthResponse(BaseModel):
    """
    R√©ponse du contr√¥le de sant√© de l'API
    
    Fournit l'√©tat d√©taill√© du syst√®me pour le monitoring :
    - √âtat du mod√®le Kokoro
    - M√©triques de performance
    - Temps de fonctionnement
    """
    status: str
    model_loaded: bool
    model_load_time: Optional[float]
    available_voices: int
    uptime: float
    
# ===============================
# GESTIONNAIRE DE CYCLE DE VIE
# ===============================

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gestionnaire du cycle de vie de l'application
    
    G√®re le chargement et la lib√©ration des ressources :
    - Startup : Chargement unique du mod√®le Kokoro
    - Test de fonctionnalit√© √† l'initialisation
    - Cr√©ation des dossiers temporaires
    - Shutdown : Nettoyage des ressources
    
    Pattern Singleton pour optimiser la m√©moire et les performances.
    """
    
    # Startup
    global kokoro_pipeline, model_load_time
    logger.info("üöÄ D√©marrage de l'API Kokoro TTS...")
    
    try:
        start_time = time.time()
        
        # Import et chargement du mod√®le
        from kokoro import KPipeline
        logger.info("üì• Chargement du pipeline Kokoro (lang_code='a')...")
        
        # Initialisation avec device auto (CPU/GPU selon disponibilit√©)
        kokoro_pipeline = KPipeline(lang_code='a')
        
        model_load_time = time.time() - start_time
        logger.info(f"‚úÖ Mod√®le charg√© en {model_load_time:.2f}s")
        
        # Cr√©er les dossiers n√©cessaires
        Path("temp_audio").mkdir(exist_ok=True)
        logger.info("üìÅ Dossier temp_audio cr√©√©")
        
        # Test rapide du mod√®le
        logger.info("üß™ Test rapide du mod√®le...")
        test_gen = kokoro_pipeline("Hello, API is ready!", voice='af_heart')
        for _, _, audio in test_gen:
            logger.info(f"‚úÖ Test r√©ussi - {len(audio)} samples g√©n√©r√©s")
            break
        
        logger.info("üéâ API Kokoro TTS pr√™te !")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du chargement: {e}")
        kokoro_pipeline = None
        raise
    
    yield
    
    # Shutdown
    logger.info("üõë Arr√™t de l'API Kokoro TTS...")
    # Nettoyage si n√©cessaire

# ===============================
# CONFIGURATION FASTAPI
# ===============================

# Initialisation de l'application avec m√©tadonn√©es professionnelles
app = FastAPI(
    title="Kokoro TTS API Optimized",
    description="API de synth√®se vocale optimis√©e utilisant Kokoro v0.19 - Sp√©cialis√©e anglais",
    version="1.1.0",
    lifespan=lifespan
)

# Configuration CORS pour d√©veloppement et production
# En production : restreindre allow_origins aux domaines autoris√©s
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En production: sp√©cifier les domaines autoris√©s
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ===============================
# VARIABLES DE MONITORING
# ===============================

# Horodatage de d√©marrage pour calcul de l'uptime
app_start_time = time.time()

# ===============================
# ENDPOINTS PRINCIPAUX
# ===============================

@app.get("/")
async def root():
    """
    Point d'entr√©e de l'API - Informations g√©n√©rales
    
    Fournit les informations de base sur l'API :
    - Version et √©tat de l'API
    - Mod√®le utilis√© et optimisations
    - Liste des endpoints disponibles
    - Utile pour le debugging et la documentation
    """
    return {
        "name": "Kokoro TTS API Optimized",
        "version": "1.1.0",
        "status": "active",
        "model": "Kokoro-82M",
        "language": "English (American)",
        "optimizations": [
            "Single model instance",
            "Pre-loaded pipeline", 
            "Optimized voice selection",
            "Background cleanup"
        ],
        "endpoints": {
            "POST /tts": "Synth√®se vocale optimis√©e",
            "POST /tts/stream": "Streaming audio (bient√¥t disponible)",
            "GET /voices": "Voix disponibles avec recommandations",
            "GET /health": "√âtat d√©taill√© de l'API"
        }
    }

@app.get("/health", response_model=HealthResponse)
async def health_check():
    """
    Contr√¥le de sant√© d√©taill√© de l'API
    
    Endpoint critique pour le monitoring et la supervision :
    - V√©rifie que le mod√®le Kokoro est charg√© et fonctionnel
    - Retourne les m√©triques de performance
    - Calcule l'uptime de l'application
    - Utilis√© par les load balancers et outils de monitoring
    
    Returns:
        HealthResponse: √âtat d√©taill√© du syst√®me
        
    Raises:
        HTTPException 503: Si le mod√®le n'est pas disponible
    """
    
    if kokoro_pipeline is None:
        raise HTTPException(
            status_code=503, 
            detail="Mod√®le Kokoro non disponible. Red√©marrez l'API."
        )
    
    uptime = time.time() - app_start_time
    
    return HealthResponse(
        status="healthy",
        model_loaded=kokoro_pipeline is not None,
        model_load_time=model_load_time,
        available_voices=3,  # af_heart, af_bella, af_sarah
        uptime=uptime
    )

@app.get("/voices", response_model=List[VoiceInfo])
async def get_voices():
    """
    Liste des voix disponibles avec m√©tadonn√©es enrichies
    
    Retourne la liste compl√®te des voix avec leurs caract√©ristiques :
    - Informations techniques (langue, genre)
    - Descriptions subjectives bas√©es sur les tests
    - Recommandations d'utilisation
    - M√©tadonn√©es pour l'interface utilisateur
    
    Les voix list√©es ont √©t√© test√©es et valid√©es manuellement.
    
    Returns:
        List[VoiceInfo]: Liste des voix avec m√©tadonn√©es compl√®tes
    """
    
    voices = [
        VoiceInfo(
            id="af_heart",
            name="Heart",
            description="Voix f√©minine chaleureuse et expressive",
            language="en-US",
            gender="female",
            recommended=True  # Bas√© sur vos tests
        ),
        VoiceInfo(
            id="af_bella",
            name="Bella", 
            description="Voix f√©minine claire et articul√©e",
            language="en-US",
            gender="female"
        ),
        VoiceInfo(
            id="af_sarah",
            name="Sarah",
            description="Voix f√©minine douce et naturelle", 
            language="en-US",
            gender="female"
        )
    ]
    
    return voices

@app.post("/tts", response_model=TTSResponse)
async def text_to_speech(request: TTSRequest, background_tasks: BackgroundTasks):
    """
    Endpoint principal de synth√®se vocale - Version optimis√©e
    
    Transforme le texte en audio avec les param√®tres sp√©cifi√©s :
    - Utilise l'instance unique du mod√®le (performance optimale)
    - G√®re automatiquement la concat√©nation multi-segments
    - Sauvegarde temporaire avec nettoyage automatique
    - Validation stricte des param√®tres d'entr√©e
    - M√©triques d√©taill√©es de performance
    
    Args:
        request (TTSRequest): Param√®tres de synth√®se valid√©s
        background_tasks (BackgroundTasks): Gestionnaire de t√¢ches asynchrones
        
    Returns:
        TTSResponse: R√©ponse avec URL audio et m√©tadonn√©es
        
    Raises:
        HTTPException 503: Mod√®le non disponible
        HTTPException 400: Voix invalide
        HTTPException 500: Erreur de g√©n√©ration
    """
    
    if kokoro_pipeline is None:
        raise HTTPException(
            status_code=503,
            detail="Mod√®le Kokoro non disponible"
        )
    
    # Validation de la voix
    valid_voices = ["af_heart", "af_bella", "af_sarah"]
    if request.voice not in valid_voices:
        raise HTTPException(
            status_code=400,
            detail=f"Voix '{request.voice}' non disponible. Voix disponibles: {valid_voices}"
        )
    
    try:
        logger.info(f"üé§ Synth√®se demand√©e: '{request.text[:50]}...' avec {request.voice}")
        start_time = time.time()
        
        # G√©n√©ration de l'ID unique
        audio_id = str(uuid.uuid4())
        audio_filename = f"kokoro_{audio_id}.wav"
        audio_path = Path("temp_audio") / audio_filename
        
        # Synth√®se vocale avec les param√®tres optimis√©s
        generator = kokoro_pipeline(
            request.text,
            voice=request.voice,
            speed=request.speed
        )
        
        # Collecte de tous les segments
        all_audio_segments = []
        segments_info = []
        
        for i, (graphemes, phonemes, audio) in enumerate(generator):
            all_audio_segments.append(audio)
            segments_info.append({
                "index": i,
                "graphemes": graphemes,
                "phonemes": phonemes,
                "samples": len(audio)
            })
            logger.debug(f"   Segment {i}: {len(audio)} samples")
        
        # Concat√©nation des segments si n√©cessaire
        if len(all_audio_segments) == 1:
            final_audio = all_audio_segments[0]
        else:
            import numpy as np
            final_audio = np.concatenate(all_audio_segments)
        
        # Sauvegarde du fichier
        sf.write(str(audio_path), final_audio, samplerate=24000)
        
        # Calcul des m√©triques
        generation_time = time.time() - start_time
        audio_duration = len(final_audio) / 24000
        
        logger.info(f"‚úÖ Synth√®se r√©ussie: {generation_time:.2f}s pour {audio_duration:.2f}s d'audio")
        
        # Programmation de la suppression automatique (apr√®s 1h)
        background_tasks.add_task(cleanup_audio_file, audio_path, delay_seconds=3600)
        
        return TTSResponse(
            success=True,
            message=f"Audio g√©n√©r√© avec succ√®s ({len(all_audio_segments)} segment(s))",
            audio_url=f"/audio/{audio_filename}",
            audio_duration=audio_duration,
            generation_time=generation_time,
            text_length=len(request.text),
            voice_used=request.voice,
            segments_count=len(all_audio_segments)
        )
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la synth√®se: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erreur de g√©n√©ration audio: {str(e)}"
        )

@app.get("/audio/{filename}")
async def get_audio_file(filename: str):
    """
    Endpoint de t√©l√©chargement des fichiers audio g√©n√©r√©s
    
    Sert les fichiers audio avec optimisations :
    - Cache HTTP pour r√©duire la bande passante
    - Support du streaming (Accept-Ranges)
    - V√©rification de s√©curit√© des noms de fichiers
    - Gestion d'erreurs pour fichiers expir√©s
    
    Args:
        filename (str): Nom du fichier audio √† t√©l√©charger
        
    Returns:
        FileResponse: Fichier audio avec headers optimis√©s
        
    Raises:
        HTTPException 404: Fichier non trouv√© ou expir√©
    """
    
    audio_path = Path("temp_audio") / filename
    
    if not audio_path.exists():
        raise HTTPException(
            status_code=404,
            detail="Fichier audio non trouv√© ou expir√©"
        )
    
    # Headers optimis√©s pour le streaming audio
    return FileResponse(
        path=str(audio_path),
        media_type="audio/wav",
        filename=filename,
        headers={
            "Cache-Control": "public, max-age=3600",  # Cache 1h
            "Accept-Ranges": "bytes"  # Support du streaming
        }
    )

@app.delete("/audio/{filename}")
async def delete_audio_file(filename: str):
    """
    Suppression manuelle d'un fichier audio temporaire
    
    Permet le nettoyage manuel des fichiers avant expiration automatique.
    Utile pour lib√©rer l'espace disque ou respecter la confidentialit√©.
    
    Args:
        filename (str): Nom du fichier √† supprimer
        
    Returns:
        dict: Message de confirmation
        
    Raises:
        HTTPException 404: Fichier non trouv√©
    """
    
    audio_path = Path("temp_audio") / filename
    
    if audio_path.exists():
        audio_path.unlink()
        logger.info(f"üóëÔ∏è  Fichier supprim√©: {filename}")
        return {"message": f"Fichier {filename} supprim√© avec succ√®s"}
    else:
        raise HTTPException(status_code=404, detail="Fichier non trouv√©")

@app.get("/stats")
async def get_stats():
    """
    Statistiques d√©taill√©es de l'API et du syst√®me
    
    Endpoint de monitoring avanc√© pour l'administration :
    - Uptime de l'application
    - Performance du mod√®le (temps de chargement)
    - Gestion des fichiers temporaires (nombre, taille)
    - √âtat g√©n√©ral du syst√®me
    
    Utile pour la supervision, l'optimisation et le d√©bogage.
    
    Returns:
        dict: M√©triques compl√®tes du syst√®me
    """
    
    uptime = time.time() - app_start_time
    temp_dir = Path("temp_audio")
    
    audio_files = list(temp_dir.glob("*.wav"))
    total_size_mb = sum(f.stat().st_size for f in audio_files) / (1024 * 1024)
    
    return {
        "uptime_seconds": uptime,
        "model_load_time": model_load_time,
        "temp_files_count": len(audio_files),
        "temp_files_size_mb": round(total_size_mb, 2),
        "model_loaded": kokoro_pipeline is not None
    }

# ===============================
# FONCTIONS UTILITAIRES
# ===============================

async def cleanup_audio_file(file_path: Path, delay_seconds: int = 3600):
    """
    Nettoyage automatique des fichiers temporaires
    
    Supprime automatiquement les fichiers audio apr√®s un d√©lai d√©fini.
    Ex√©cut√© en t√¢che de fond pour √©viter l'accumulation de fichiers.
    
    Args:
        file_path (Path): Chemin du fichier √† supprimer
        delay_seconds (int): D√©lai avant suppression (d√©faut : 1h)
        
    Note:
        Fonction asynchrone pour ne pas bloquer l'API principale.
        G√®re les erreurs de suppression (fichier d√©j√† supprim√©, permissions).
    """
    await asyncio.sleep(delay_seconds)
    
    if file_path.exists():
        try:
            file_path.unlink()
            logger.info(f"üóëÔ∏è  Auto-suppression: {file_path.name}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  Impossible de supprimer {file_path.name}: {e}")

# ===============================
# POINT D'ENTR√âE DE L'APPLICATION
# ===============================

if __name__ == "__main__":
    # Configuration de production recommand√©e
    uvicorn.run(
        "api_kokoro_optimized:app",
        host="0.0.0.0",          # Accessible depuis l'ext√©rieur
        port=8000,               # Port standard pour l'API
        reload=True,             # Rechargement auto en d√©veloppement
        log_level="info",        # Niveau de logs d√©taill√©
        access_log=True          # Logs d'acc√®s pour le monitoring
    )
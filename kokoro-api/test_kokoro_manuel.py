#!/usr/bin/env python3
"""
Script de test manuel pour Kokoro v0.19
Bas√© sur les exemples officiels du d√©p√¥t GitHub
"""

import os
import time
import soundfile as sf
from pathlib import Path

def test_basic_usage():
    """Test basique selon l'exemple du README officiel"""
    print("üîÑ Test 1: Usage basique de Kokoro")
    
    try:
        from kokoro import KPipeline
        
        # Initialisation avec l'anglais am√©ricain
        print("   üì• Chargement du pipeline (lang_code='a' = American English)...")
        pipeline = KPipeline(lang_code='a')
        
        # Texte de test simple
        text = "Bonjour, ceci est un test de synth√®se vocale avec Kokoro."
        print(f"   üìù Texte: '{text}'")
        
        # G√©n√©ration
        print("   üéµ G√©n√©ration de l'audio...")
        start_time = time.time()
        
        generator = pipeline(text, voice='af_heart')
        
        # Sauvegarde des fichiers
        audio_files = []
        for i, (gs, ps, audio) in enumerate(generator):
            filename = f'test_basic_{i}.wav'
            sf.write(filename, audio, 24000)
            audio_files.append(filename)
            print(f"      ‚úÖ Segment {i}: {len(audio)} samples -> {filename}")
            print(f"         üìù Graph√®mes: {gs}")
            print(f"         üî§ Phon√®mes: {ps}")
        
        end_time = time.time()
        print(f"   ‚è±Ô∏è  Temps total: {end_time - start_time:.2f}s")
        print(f"   üìÅ {len(audio_files)} fichier(s) g√©n√©r√©(s): {audio_files}")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return False

def test_different_voices():
    """Test avec diff√©rentes voix disponibles"""
    print("\nüîÑ Test 2: Test de diff√©rentes voix")
    
    try:
        from kokoro import KPipeline
        
        pipeline = KPipeline(lang_code='a')
        text = "Testing different voices with Kokoro TTS."
        
        # Voix √† tester (selon la documentation)
        voices_to_test = ['af_heart', 'af_bella', 'af_sarah']
        
        for voice in voices_to_test:
            print(f"   üé§ Test de la voix: {voice}")
            try:
                generator = pipeline(text, voice=voice)
                
                for i, (gs, ps, audio) in enumerate(generator):
                    filename = f'test_voice_{voice}_{i}.wav'
                    sf.write(filename, audio, 24000)
                    print(f"      ‚úÖ {filename} ({len(audio)} samples)")
                    
            except Exception as e:
                print(f"      ‚ùå Erreur avec {voice}: {e}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur g√©n√©rale: {e}")
        return False

def test_performance():
    """Test de performance selon l'exemple device_examples.py"""
    print("\nüîÑ Test 3: Test de performance")
    
    try:
        from kokoro import KPipeline
        
        text = "The quick brown fox jumps over the lazy dog."
        
        # Test avec diff√©rents devices
        devices_to_test = [None, 'cpu']  # On √©vite 'cuda' pour l'instant
        
        for device in devices_to_test:
            device_name = device or 'auto'
            print(f"   üñ•Ô∏è  Test avec device: {device_name}")
            
            try:
                start_time = time.perf_counter()
                pipeline = KPipeline(lang_code='a', device=device)
                
                for _, _, audio in pipeline(text, voice='af_heart'):
                    samples = audio.shape[0] if audio is not None else 0
                    break  # Prendre seulement le premier segment
                
                end_time = time.perf_counter()
                ms = (end_time - start_time) * 1000
                
                print(f"      ‚úÖ {device_name:<6} | {ms:>5.1f}ms total | {samples:>6,d} samples")
                
            except Exception as e:
                print(f"      ‚ùå {device_name:<6} | {str(e)}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur g√©n√©rale: {e}")
        return False

def test_long_text():
    """Test avec un texte plus long"""
    print("\nüîÑ Test 4: Test avec texte long")
    
    try:
        from kokoro import KPipeline
        
        pipeline = KPipeline(lang_code='a')
        
        # Texte plus long avec plusieurs phrases
        long_text = '''
        Kokoro is an open-weight TTS model with 82 million parameters. 
        Despite its lightweight architecture, it delivers comparable quality to larger models 
        while being significantly faster and more cost-efficient. 
        With Apache-licensed weights, Kokoro can be deployed anywhere 
        from production environments to personal projects.
        '''
        
        print(f"   üìù Texte ({len(long_text)} caract√®res)")
        print(f"      {long_text[:100]}...")
        
        start_time = time.time()
        generator = pipeline(long_text.strip(), voice='af_heart', speed=1)
        
        total_samples = 0
        for i, (gs, ps, audio) in enumerate(generator):
            filename = f'test_long_{i}.wav'
            sf.write(filename, audio, 24000)
            total_samples += len(audio)
            print(f"      ‚úÖ Segment {i}: {len(audio)} samples -> {filename}")
        
        end_time = time.time()
        duration_seconds = total_samples / 24000
        
        print(f"   ‚è±Ô∏è  Temps de g√©n√©ration: {end_time - start_time:.2f}s")
        print(f"   üéµ Dur√©e audio totale: {duration_seconds:.2f}s")
        print(f"   üìä Ratio temps r√©el: {duration_seconds / (end_time - start_time):.2f}x")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return False

def test_multilingual():
    """Test des capacit√©s multilingues"""
    print("\nüîÑ Test 5: Test multilingue (si disponible)")
    
    # Tests pour diff√©rentes langues selon la documentation
    language_tests = [
        ('a', 'af_heart', "Hello, this is a test in American English."),
        ('f', 'af_heart', "Bonjour, ceci est un test en fran√ßais."),  # Si disponible
    ]
    
    for lang_code, voice, text in language_tests:
        try:
            print(f"   üåç Test langue: {lang_code} - {text[:30]}...")
            
            from kokoro import KPipeline
            pipeline = KPipeline(lang_code=lang_code)
            
            generator = pipeline(text, voice=voice)
            
            for i, (gs, ps, audio) in enumerate(generator):
                filename = f'test_lang_{lang_code}_{i}.wav'
                sf.write(filename, audio, 24000)
                print(f"      ‚úÖ {filename} ({len(audio)} samples)")
                break  # Premier segment seulement
            
        except Exception as e:
            print(f"      ‚ùå Erreur pour {lang_code}: {e}")
    
    return True

def main():
    """Lance tous les tests manuels"""
    print("=" * 60)
    print("üéØ TESTS MANUELS KOKORO TTS - Bas√© sur les exemples officiels")
    print("=" * 60)
    
    # Cr√©er le dossier de sortie
    output_dir = Path("test_outputs")
    output_dir.mkdir(exist_ok=True)
    os.chdir(output_dir)
    
    print(f"üìÅ R√©pertoire de travail: {os.getcwd()}")
    
    # Tests √† ex√©cuter
    tests = [
        test_basic_usage,
        test_different_voices,
        test_performance,
        test_long_text,
        test_multilingual,
    ]
    
    results = []
    for test_func in tests:
        try:
            result = test_func()
            results.append(result)
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è  Test interrompu par l'utilisateur")
            break
        except Exception as e:
            print(f"\n‚ùå Erreur inattendue dans {test_func.__name__}: {e}")
            results.append(False)
    
    # R√©sultats finaux
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 60)
    
    passed = sum(results)
    total = len(results)
    
    print(f"‚úÖ Tests r√©ussis: {passed}/{total}")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s !")
        print("\nüìã Points √† v√©rifier manuellement:")
        print("   1. √âcoutez les fichiers .wav g√©n√©r√©s")
        print("   2. V√©rifiez la qualit√© de la synth√®se vocale")
        print("   3. Notez les temps de r√©ponse")
        print("   4. Comparez les diff√©rentes voix")
        
        print(f"\nüìÅ Fichiers g√©n√©r√©s dans: {os.getcwd()}")
        
        # Lister les fichiers g√©n√©r√©s
        wav_files = list(Path('.').glob('*.wav'))
        print(f"   üéµ {len(wav_files)} fichier(s) audio cr√©√©(s):")
        for wav_file in sorted(wav_files):
            size_kb = wav_file.stat().st_size // 1024
            print(f"      - {wav_file} ({size_kb} KB)")
    else:
        print(f"‚ö†Ô∏è  {total - passed} test(s) ont √©chou√©")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    
    print("\n" + "=" * 60)
    if success:
        print("üöÄ Prochaines √©tapes:")
        print("   1. V√©rifiez manuellement la qualit√© audio")
        print("   2. Si satisfait, passez √† la cr√©ation de l'API FastAPI")
        print("   3. Sinon, ajustez les param√®tres ou testez d'autres voix")
    else:
        print("üîß Actions correctives:")
        print("   1. V√©rifiez l'installation: pip install kokoro>=0.9.4 soundfile")
        print("   2. Installez espeak-ng si n√©cessaire")
        print("   3. Consultez la documentation: https://github.com/hexgrad/kokoro")
    
    print("=" * 60)